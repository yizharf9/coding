#include  "bsp.h"

             NAME   MAIN
             PUBLIC state,main
             EXTERN SysConfig,ClrLEDs,IncLED,DecLED,delay
             EXTERN PrintLEDs,ReadSWs,PrintSWs2LEDs
             
;----------------------------------------------------------------------------------
             ORG      DataSegStart         ; Begins a DATA segment
             
state        DW   0                        ; state variable

;-------------------------------------------------------------------------------------          
             ;RSEG    CSTACK    ; shows to compiler where is the RAM populating limit
                                ; can be ignored
;-------------------------------------------------------------------------------------
             ORG     CodeSegStart       ; Program Reset = Begins a CODE segment
             
main         mov.w   #StackTosStart,SP  ; Initialize stack pointer to the RAM end 
             call    #SysConfig
             clr     state              ; set to idle state at the beginning
;---------------------- FSM_loop -------------------------------------
state0       cmp     #0x00,state         ;check if state0           
             jnz     state1
             call    #PrintSWs2LEDs
             bis.w   #CPUOFF+GIE,SR 

state1       cmp     #0x01,state         ;check if state1
             jnz     state2
             DINT             
             call    #IncLED           ;infinite function 
             push    #delay62_5ms
             call    #delay
             EINT
            
state2       cmp     #0x02,state         ;check if state2
             jnz     state0  
             DINT
             call    #DecLED           ;infinite function
             push    #delay62_5ms
             call    #delay
             EINT
            
             jmp     state0       
                 
             END
