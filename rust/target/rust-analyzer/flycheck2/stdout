{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.92","manifest_path":"C:\\Users\\ADMIN\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\proc-macro2-1.0.92\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\ADMIN\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\proc-macro2-1.0.92\\build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","proc-macro"],"filenames":["C:\\Users\\ADMIN\\coding\\rust\\testing\\target\\debug\\build\\proc-macro2-382aa1ca67e7a396\\build-script-build.exe","C:\\Users\\ADMIN\\coding\\rust\\testing\\target\\debug\\build\\proc-macro2-382aa1ca67e7a396\\build_script_build.pdb"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.92","linked_libs":[],"linked_paths":[],"cfgs":["no_literal_byte_character","no_literal_c_string","wrap_proc_macro"],"env":[],"out_dir":"C:\\Users\\ADMIN\\coding\\rust\\testing\\target\\debug\\build\\proc-macro2-1763e8113ce3118b\\out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#unicode-ident@1.0.14","manifest_path":"C:\\Users\\ADMIN\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\unicode-ident-1.0.14\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"unicode_ident","src_path":"C:\\Users\\ADMIN\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\unicode-ident-1.0.14\\src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\ADMIN\\coding\\rust\\testing\\target\\debug\\deps\\libunicode_ident-7b5f9b0e3ef2e32f.rlib","C:\\Users\\ADMIN\\coding\\rust\\testing\\target\\debug\\deps\\libunicode_ident-7b5f9b0e3ef2e32f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#byteorder@1.5.0","manifest_path":"C:\\Users\\ADMIN\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\byteorder-1.5.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"byteorder","src_path":"C:\\Users\\ADMIN\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\byteorder-1.5.0\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\ADMIN\\coding\\rust\\testing\\target\\debug\\deps\\libbyteorder-c9ecc0da8b2bac97.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#autocfg@1.2.0","manifest_path":"C:\\Users\\ADMIN\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\autocfg-1.2.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"autocfg","src_path":"C:\\Users\\ADMIN\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\autocfg-1.2.0\\src\\lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\ADMIN\\coding\\rust\\testing\\target\\debug\\deps\\libautocfg-22bdf6a99b907830.rlib","C:\\Users\\ADMIN\\coding\\rust\\testing\\target\\debug\\deps\\libautocfg-22bdf6a99b907830.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#cfg-if@1.0.0","manifest_path":"C:\\Users\\ADMIN\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\cfg-if-1.0.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"cfg-if","src_path":"C:\\Users\\ADMIN\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\cfg-if-1.0.0\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\ADMIN\\coding\\rust\\testing\\target\\debug\\deps\\libcfg_if-0b5a7078313d8127.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#hex@0.4.3","manifest_path":"C:\\Users\\ADMIN\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\hex-0.4.3\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hex","src_path":"C:\\Users\\ADMIN\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\hex-0.4.3\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["C:\\Users\\ADMIN\\coding\\rust\\testing\\target\\debug\\deps\\libhex-88e1a8cdbcc84394.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.92","manifest_path":"C:\\Users\\ADMIN\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\proc-macro2-1.0.92\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"proc_macro2","src_path":"C:\\Users\\ADMIN\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\proc-macro2-1.0.92\\src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","proc-macro"],"filenames":["C:\\Users\\ADMIN\\coding\\rust\\testing\\target\\debug\\deps\\libproc_macro2-747bbfdd00fc633a.rlib","C:\\Users\\ADMIN\\coding\\rust\\testing\\target\\debug\\deps\\libproc_macro2-747bbfdd00fc633a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#num-traits@0.2.18","manifest_path":"C:\\Users\\ADMIN\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\num-traits-0.2.18\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\ADMIN\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\num-traits-0.2.18\\build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["i128","std"],"filenames":["C:\\Users\\ADMIN\\coding\\rust\\testing\\target\\debug\\build\\num-traits-676a0728185d3b57\\build-script-build.exe","C:\\Users\\ADMIN\\coding\\rust\\testing\\target\\debug\\build\\num-traits-676a0728185d3b57\\build_script_build.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#getrandom@0.2.15","manifest_path":"C:\\Users\\ADMIN\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\getrandom-0.2.15\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"getrandom","src_path":"C:\\Users\\ADMIN\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\getrandom-0.2.15\\src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["C:\\Users\\ADMIN\\coding\\rust\\testing\\target\\debug\\deps\\libgetrandom-b7025c4e0c0415c3.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#quote@1.0.38","manifest_path":"C:\\Users\\ADMIN\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\quote-1.0.38\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"quote","src_path":"C:\\Users\\ADMIN\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\quote-1.0.38\\src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","proc-macro"],"filenames":["C:\\Users\\ADMIN\\coding\\rust\\testing\\target\\debug\\deps\\libquote-7f6361e02c5aa111.rlib","C:\\Users\\ADMIN\\coding\\rust\\testing\\target\\debug\\deps\\libquote-7f6361e02c5aa111.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#num-traits@0.2.18","linked_libs":[],"linked_paths":[],"cfgs":["has_to_int_unchecked","has_reverse_bits","has_leading_trailing_ones","has_div_euclid","has_copysign","has_is_subnormal","has_total_cmp","has_int_to_from_bytes","has_float_to_from_bytes"],"env":[],"out_dir":"C:\\Users\\ADMIN\\coding\\rust\\testing\\target\\debug\\build\\num-traits-52ac160ebffb74c8\\out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rand_core@0.6.4","manifest_path":"C:\\Users\\ADMIN\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\rand_core-0.6.4\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand_core","src_path":"C:\\Users\\ADMIN\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\rand_core-0.6.4\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","getrandom","std"],"filenames":["C:\\Users\\ADMIN\\coding\\rust\\testing\\target\\debug\\deps\\librand_core-89627731eb175a35.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#syn@2.0.95","manifest_path":"C:\\Users\\ADMIN\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\syn-2.0.95\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"syn","src_path":"C:\\Users\\ADMIN\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\syn-2.0.95\\src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["clone-impls","default","derive","parsing","printing","proc-macro"],"filenames":["C:\\Users\\ADMIN\\coding\\rust\\testing\\target\\debug\\deps\\libsyn-8c57001ca6de3cbd.rlib","C:\\Users\\ADMIN\\coding\\rust\\testing\\target\\debug\\deps\\libsyn-8c57001ca6de3cbd.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zerocopy-derive@0.7.35","manifest_path":"C:\\Users\\ADMIN\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\zerocopy-derive-0.7.35\\Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"zerocopy-derive","src_path":"C:\\Users\\ADMIN\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\zerocopy-derive-0.7.35\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\ADMIN\\coding\\rust\\testing\\target\\debug\\deps\\zerocopy_derive-c1427d42b56c6558.dll","C:\\Users\\ADMIN\\coding\\rust\\testing\\target\\debug\\deps\\zerocopy_derive-c1427d42b56c6558.dll.lib","C:\\Users\\ADMIN\\coding\\rust\\testing\\target\\debug\\deps\\zerocopy_derive-c1427d42b56c6558.dll.exp","C:\\Users\\ADMIN\\coding\\rust\\testing\\target\\debug\\deps\\zerocopy_derive-c1427d42b56c6558.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#num-traits@0.2.18","manifest_path":"C:\\Users\\ADMIN\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\num-traits-0.2.18\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"num-traits","src_path":"C:\\Users\\ADMIN\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\num-traits-0.2.18\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["i128","std"],"filenames":["C:\\Users\\ADMIN\\coding\\rust\\testing\\target\\debug\\deps\\libnum_traits-1a7cb00f4c6f9ce0.rmeta"],"executable":null,"fresh":false}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zerocopy@0.7.35","manifest_path":"C:\\Users\\ADMIN\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\zerocopy-0.7.35\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"zerocopy","src_path":"C:\\Users\\ADMIN\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\zerocopy-0.7.35\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["byteorder","default","derive","simd","zerocopy-derive"],"filenames":["C:\\Users\\ADMIN\\coding\\rust\\testing\\target\\debug\\deps\\libzerocopy-d93e8de3ed23e012.rmeta"],"executable":null,"fresh":false}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#num-integer@0.1.46","manifest_path":"C:\\Users\\ADMIN\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\num-integer-0.1.46\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"num-integer","src_path":"C:\\Users\\ADMIN\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\num-integer-0.1.46\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["C:\\Users\\ADMIN\\coding\\rust\\testing\\target\\debug\\deps\\libnum_integer-7711664588b0c878.rmeta"],"executable":null,"fresh":false}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ppv-lite86@0.2.20","manifest_path":"C:\\Users\\ADMIN\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\ppv-lite86-0.2.20\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ppv_lite86","src_path":"C:\\Users\\ADMIN\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\ppv-lite86-0.2.20\\src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["simd","std"],"filenames":["C:\\Users\\ADMIN\\coding\\rust\\testing\\target\\debug\\deps\\libppv_lite86-67806bb9939f691b.rmeta"],"executable":null,"fresh":false}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rand_chacha@0.3.1","manifest_path":"C:\\Users\\ADMIN\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\rand_chacha-0.3.1\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand_chacha","src_path":"C:\\Users\\ADMIN\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\rand_chacha-0.3.1\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["C:\\Users\\ADMIN\\coding\\rust\\testing\\target\\debug\\deps\\librand_chacha-76a93fa425e1cfb6.rmeta"],"executable":null,"fresh":false}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rand@0.8.5","manifest_path":"C:\\Users\\ADMIN\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\rand-0.8.5\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand","src_path":"C:\\Users\\ADMIN\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\rand-0.8.5\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","getrandom","libc","rand_chacha","std","std_rng"],"filenames":["C:\\Users\\ADMIN\\coding\\rust\\testing\\target\\debug\\deps\\librand-a51c71820c4fde14.rmeta"],"executable":null,"fresh":false}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/ADMIN/coding/rust/testing#0.1.0","manifest_path":"C:\\Users\\ADMIN\\coding\\rust\\testing\\Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"testing","src_path":"C:\\Users\\ADMIN\\coding\\rust\\testing\\src\\main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"$message_type":"diagnostic","message":"no method named `is_leaf` found for enum `Option` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src\\main.rs","byte_start":271,"byte_end":278,"line_start":11,"line_end":11,"column_start":27,"column_end":34,"is_primary":true,"text":[{"text":"    if let Some(b_) = val.is_leaf() {","highlight_start":27,"highlight_end":34}],"label":"method not found in `Option<Box<Node<i32>>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the method `is_leaf` exists on the type `Box<Node<i32>>`","code":null,"level":"note","spans":[{"file_name":"src\\main.rs","byte_start":810,"byte_end":837,"line_start":38,"line_end":38,"column_start":5,"column_end":32,"is_primary":true,"text":[{"text":"    pub fn is_leaf(&self)->bool{","highlight_start":5,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"consider using `Option::expect` to unwrap the `Box<Node<i32>>` value, panicking if the value is an `Option::None`","code":null,"level":"help","spans":[{"file_name":"src\\main.rs","byte_start":270,"byte_end":270,"line_start":11,"line_end":11,"column_start":26,"column_end":26,"is_primary":true,"text":[{"text":"    if let Some(b_) = val.is_leaf() {","highlight_start":26,"highlight_end":26}],"label":null,"suggested_replacement":".expect(\"REASON\")","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: no method named `is_leaf` found for enum `Option` in the current scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:11:27\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    if let Some(b_) = val.is_leaf() {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod not found in `Option<Box<Node<i32>>>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the method `is_leaf` exists on the type `Box<Node<i32>>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:38:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m38\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn is_leaf(&self)->bool{\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider using `Option::expect` to unwrap the `Box<Node<i32>>` value, panicking if the value is an `Option::None`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    if let Some(b_) = val\u001b[0m\u001b[0m\u001b[38;5;10m.expect(\"REASON\")\u001b[0m\u001b[0m.is_leaf() {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[38;5;10m+++++++++++++++++\u001b[0m\n\n"}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/ADMIN/coding/rust/testing#0.1.0","manifest_path":"C:\\Users\\ADMIN\\coding\\rust\\testing\\Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"testing","src_path":"C:\\Users\\ADMIN\\coding\\rust\\testing\\src\\main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"$message_type":"diagnostic","message":"aborting due to 1 previous error","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: aborting due to 1 previous error\u001b[0m\n\n"}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/ADMIN/coding/rust/testing#0.1.0","manifest_path":"C:\\Users\\ADMIN\\coding\\rust\\testing\\Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"testing","src_path":"C:\\Users\\ADMIN\\coding\\rust\\testing\\src\\main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"$message_type":"diagnostic","message":"For more information about this error, try `rustc --explain E0599`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mFor more information about this error, try `rustc --explain E0599`.\u001b[0m\n"}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/ADMIN/coding/rust/testing#0.1.0","manifest_path":"C:\\Users\\ADMIN\\coding\\rust\\testing\\Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"testing","src_path":"C:\\Users\\ADMIN\\coding\\rust\\testing\\src\\main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"$message_type":"diagnostic","message":"no method named `is_leaf` found for enum `Option` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src\\main.rs","byte_start":271,"byte_end":278,"line_start":11,"line_end":11,"column_start":27,"column_end":34,"is_primary":true,"text":[{"text":"    if let Some(b_) = val.is_leaf() {","highlight_start":27,"highlight_end":34}],"label":"method not found in `Option<Box<Node<i32>>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the method `is_leaf` exists on the type `Box<Node<i32>>`","code":null,"level":"note","spans":[{"file_name":"src\\main.rs","byte_start":810,"byte_end":837,"line_start":38,"line_end":38,"column_start":5,"column_end":32,"is_primary":true,"text":[{"text":"    pub fn is_leaf(&self)->bool{","highlight_start":5,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"consider using `Option::expect` to unwrap the `Box<Node<i32>>` value, panicking if the value is an `Option::None`","code":null,"level":"help","spans":[{"file_name":"src\\main.rs","byte_start":270,"byte_end":270,"line_start":11,"line_end":11,"column_start":26,"column_end":26,"is_primary":true,"text":[{"text":"    if let Some(b_) = val.is_leaf() {","highlight_start":26,"highlight_end":26}],"label":null,"suggested_replacement":".expect(\"REASON\")","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: no method named `is_leaf` found for enum `Option` in the current scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:11:27\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    if let Some(b_) = val.is_leaf() {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod not found in `Option<Box<Node<i32>>>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the method `is_leaf` exists on the type `Box<Node<i32>>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:38:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m38\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn is_leaf(&self)->bool{\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider using `Option::expect` to unwrap the `Box<Node<i32>>` value, panicking if the value is an `Option::None`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    if let Some(b_) = val\u001b[0m\u001b[0m\u001b[38;5;10m.expect(\"REASON\")\u001b[0m\u001b[0m.is_leaf() {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[38;5;10m+++++++++++++++++\u001b[0m\n\n"}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/ADMIN/coding/rust/testing#0.1.0","manifest_path":"C:\\Users\\ADMIN\\coding\\rust\\testing\\Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"testing","src_path":"C:\\Users\\ADMIN\\coding\\rust\\testing\\src\\main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"$message_type":"diagnostic","message":"aborting due to 1 previous error","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: aborting due to 1 previous error\u001b[0m\n\n"}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/ADMIN/coding/rust/testing#0.1.0","manifest_path":"C:\\Users\\ADMIN\\coding\\rust\\testing\\Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"testing","src_path":"C:\\Users\\ADMIN\\coding\\rust\\testing\\src\\main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"$message_type":"diagnostic","message":"For more information about this error, try `rustc --explain E0599`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mFor more information about this error, try `rustc --explain E0599`.\u001b[0m\n"}}
{"reason":"build-finished","success":false}
